package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"log"
)

type Page struct {
	Title string
	Body []byte
}

type Dep struct {
    Body []byte
    Type string
}

func give404(w http.ResponseWriter) {
    fmt.Fprintf(w, "%s", "<html><head><title>Error 404</title></head><body><h1>404</h1><h3>This page could not be found.</h3></body></html>")
}

func loadPage(section string, title string, extension string) (*Page, error) {
	if extension == "" {
		extension = "html"
	} else if extension == " " {
		extension = ""
	}
	if len(section) != 0 {
		section = section + "/"
	}
	filename := section + title + "." + extension
	log.Println("Filename: "+filename)
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

func pubViewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/public/"):]
	var p *Page
    var err error
	if len(title) < 2 {
		p, err = loadPage("root", "public", "")
	} else {
		p, err = loadPage("public", title, "")
	}
    if err != nil {
        give404(w)
    } else {
	   fmt.Fprintf(w, "%s", p.Body)
    }
}

func rozViewHandler(w http.ResponseWriter, r *http.Request) {
    title := r.URL.Path[len("/rozzie/"):]
    var p *Page
    var err error
    if len(title) < 2 {
            p, err = loadPage("root", "rozzie", "")
    } else {
            p, err = loadPage("rozzie", title, "")
    }
    if err != nil {
        give404(w)
    } else {
        fmt.Fprintf(w, "%s", p.Body)
    }
}

func rootViewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/"):]
    var p *Page
    var err error
    if len(title) < 2 {
    p, err = loadPage("root", "root", "")
    } else {
        if strings.HasSuffix(title, ".html") {
            p, err = loadPage("root", title, " ")
        } else if strings.Contains(title, ".") {
            log.Println(title)
            p, err = loadPage("root", title, " ")
	} else {
            p, err = loadPage("root", title, "html")
	}
    // else {
//        log.Println(title)
//        p, err = loadPage("root", strings.Split(title, ".")[0], strings.Split(title, ".")[1])
    //}
    }
    if err != nil {
        give404(w)
    } else {
        fmt.Fprintf(w, "%s", p.Body)
        //fmt.Println(p.Body)
    }
}

func loadCSS(name string) (*Dep, error) {
    p, err := loadPage("deps/css", strings.TrimSuffix(name, ".css"), "css")
    if err != nil {
        return nil, err
    }
    return &Dep{Body: p.Body, Type: "text/css"}, nil
}

func loadJS(name string) (*Dep, error) {
    p, err := loadPage("deps/js", strings.TrimSuffix(name, ".js"), "js")
    if err != nil {
        return nil, err
    }
    return &Dep{Body: p.Body, Type: "application/javascript"}, nil
}

func loadIMG(name string) (*Dep, error) {
    p, err := loadPage("deps/img", strings.TrimSuffix(name, ".png"), "png")
    if err != nil {
        return nil, err
    }
    return &Dep{Body: p.Body, Type: "image/png"}, nil
}

func depCSSHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/dep/css/"):]
    d, err := loadCSS(title)
    if err != nil {
        give404(w)
    } else {
        w.Header().Set("Content-Type", d.Type);
        fmt.Fprintf(w, "%s", d.Body)
    }
}

func depJSHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/dep/js/"):]
    d, err := loadCSS(title)
    if err != nil {
        give404(w)
    } else {
        w.Header().Set("Content-Type", d.Type);
        fmt.Fprintf(w, "%s", d.Body)
    }
}

func depIMGHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/dep/img/"):]
    d, err := loadIMG(title)
    if err != nil {
        give404(w)
    } else {
        w.Header().Set("Content-Type", d.Type);
        fmt.Fprintf(w, "%s", d.Body)
    }
}

func main() {
	http.HandleFunc("/public/", pubViewHandler)
	http.HandleFunc("/rozzie/", rozViewHandler)
	http.HandleFunc("/dep/js/", depJSHandler)
	//http.HandleFunc("/dep/css/", depCSSHandler)
	http.HandleFunc("/dep/img/", depIMGHandler)
	http.HandleFunc("/", rootViewHandler)
	fmt.Println(http.ListenAndServe(":4769", nil))
}
